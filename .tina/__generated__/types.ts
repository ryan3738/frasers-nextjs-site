//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getBusinessInfoDocument: BusinessInfoDocument;
  getBusinessInfoList: BusinessInfoConnection;
  getMenuCollectionDocument: MenuCollectionDocument;
  getMenuCollectionList: MenuCollectionConnection;
  getPostsDocument: PostsDocument;
  getPostsList: PostsConnection;
};


export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryGetBusinessInfoDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetBusinessInfoListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryGetMenuCollectionDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetMenuCollectionListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryGetPostsDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetPostsListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label: Scalars['String'];
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type DocumentNode = BusinessInfoDocument | MenuCollectionDocument | PostsDocument;

export type BusinessInfoAddress = {
  __typename?: 'BusinessInfoAddress';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  street2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  directions?: Maybe<Scalars['String']>;
};

export type BusinessInfoHours = {
  __typename?: 'BusinessInfoHours';
  day?: Maybe<Scalars['String']>;
  hours?: Maybe<Scalars['String']>;
};

export type BusinessInfo = {
  __typename?: 'BusinessInfo';
  name?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  address?: Maybe<BusinessInfoAddress>;
  hours?: Maybe<Array<Maybe<BusinessInfoHours>>>;
};

export type BusinessInfoDocument = Node & Document & {
  __typename?: 'BusinessInfoDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: BusinessInfo;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type BusinessInfoConnectionEdges = {
  __typename?: 'BusinessInfoConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<BusinessInfoDocument>;
};

export type BusinessInfoConnection = Connection & {
  __typename?: 'BusinessInfoConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<BusinessInfoConnectionEdges>>>;
};

export type MenuCollectionMenusSectionsItemsModifiers = {
  __typename?: 'MenuCollectionMenusSectionsItemsModifiers';
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Int']>;
};

export type MenuCollectionMenusSectionsItemsImages = {
  __typename?: 'MenuCollectionMenusSectionsItemsImages';
  name: Scalars['String'];
  src: Scalars['String'];
};

export type MenuCollectionMenusSectionsItems = {
  __typename?: 'MenuCollectionMenusSectionsItems';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Int']>;
  dietary?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiers?: Maybe<Array<Maybe<MenuCollectionMenusSectionsItemsModifiers>>>;
  available?: Maybe<Scalars['Boolean']>;
  images?: Maybe<Array<Maybe<MenuCollectionMenusSectionsItemsImages>>>;
};

export type MenuCollectionMenusSections = {
  __typename?: 'MenuCollectionMenusSections';
  name: Scalars['String'];
  items?: Maybe<Array<Maybe<MenuCollectionMenusSectionsItems>>>;
};

export type MenuCollectionMenus = {
  __typename?: 'MenuCollectionMenus';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  available?: Maybe<Scalars['Boolean']>;
  sections?: Maybe<Array<Maybe<MenuCollectionMenusSections>>>;
};

export type MenuCollection = {
  __typename?: 'MenuCollection';
  menus?: Maybe<Array<Maybe<MenuCollectionMenus>>>;
};

export type MenuCollectionDocument = Node & Document & {
  __typename?: 'MenuCollectionDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: MenuCollection;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type MenuCollectionConnectionEdges = {
  __typename?: 'MenuCollectionConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<MenuCollectionDocument>;
};

export type MenuCollectionConnection = Connection & {
  __typename?: 'MenuCollectionConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<MenuCollectionConnectionEdges>>>;
};

export type Posts = {
  __typename?: 'Posts';
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
};

export type PostsDocument = Node & Document & {
  __typename?: 'PostsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Posts;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type PostsConnectionEdges = {
  __typename?: 'PostsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<PostsDocument>;
};

export type PostsConnection = Connection & {
  __typename?: 'PostsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updateBusinessInfoDocument: BusinessInfoDocument;
  createBusinessInfoDocument: BusinessInfoDocument;
  updateMenuCollectionDocument: MenuCollectionDocument;
  createMenuCollectionDocument: MenuCollectionDocument;
  updatePostsDocument: PostsDocument;
  createPostsDocument: PostsDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateBusinessInfoDocumentArgs = {
  relativePath: Scalars['String'];
  params: BusinessInfoMutation;
};


export type MutationCreateBusinessInfoDocumentArgs = {
  relativePath: Scalars['String'];
  params: BusinessInfoMutation;
};


export type MutationUpdateMenuCollectionDocumentArgs = {
  relativePath: Scalars['String'];
  params: MenuCollectionMutation;
};


export type MutationCreateMenuCollectionDocumentArgs = {
  relativePath: Scalars['String'];
  params: MenuCollectionMutation;
};


export type MutationUpdatePostsDocumentArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationCreatePostsDocumentArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};

export type DocumentMutation = {
  businessInfo?: InputMaybe<BusinessInfoMutation>;
  menuCollection?: InputMaybe<MenuCollectionMutation>;
  posts?: InputMaybe<PostsMutation>;
};

export type BusinessInfoAddressMutation = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  street?: InputMaybe<Scalars['String']>;
  street2?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
  directions?: InputMaybe<Scalars['String']>;
};

export type BusinessInfoHoursMutation = {
  day?: InputMaybe<Scalars['String']>;
  hours?: InputMaybe<Scalars['String']>;
};

export type BusinessInfoMutation = {
  name?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<BusinessInfoAddressMutation>;
  hours?: InputMaybe<Array<InputMaybe<BusinessInfoHoursMutation>>>;
};

export type MenuCollectionMenusSectionsItemsModifiersMutation = {
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Int']>;
};

export type MenuCollectionMenusSectionsItemsImagesMutation = {
  name?: InputMaybe<Scalars['String']>;
  src?: InputMaybe<Scalars['String']>;
};

export type MenuCollectionMenusSectionsItemsMutation = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Int']>;
  dietary?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  modifiers?: InputMaybe<Array<InputMaybe<MenuCollectionMenusSectionsItemsModifiersMutation>>>;
  available?: InputMaybe<Scalars['Boolean']>;
  images?: InputMaybe<Array<InputMaybe<MenuCollectionMenusSectionsItemsImagesMutation>>>;
};

export type MenuCollectionMenusSectionsMutation = {
  name?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<MenuCollectionMenusSectionsItemsMutation>>>;
};

export type MenuCollectionMenusMutation = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  available?: InputMaybe<Scalars['Boolean']>;
  sections?: InputMaybe<Array<InputMaybe<MenuCollectionMenusSectionsMutation>>>;
};

export type MenuCollectionMutation = {
  menus?: InputMaybe<Array<InputMaybe<MenuCollectionMenusMutation>>>;
};

export type PostsMutation = {
  title?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['String']>;
};

export type BusinessInfoPartsFragment = { __typename?: 'BusinessInfo', name?: string | null | undefined, phoneNumber?: string | null | undefined, email?: string | null | undefined, address?: { __typename: 'BusinessInfoAddress', name: string, description?: string | null | undefined, street?: string | null | undefined, street2?: string | null | undefined, city?: string | null | undefined, region?: string | null | undefined, zip?: string | null | undefined, directions?: string | null | undefined } | null | undefined, hours?: Array<{ __typename: 'BusinessInfoHours', day?: string | null | undefined, hours?: string | null | undefined } | null | undefined> | null | undefined };

export type MenuCollectionPartsFragment = { __typename?: 'MenuCollection', menus?: Array<{ __typename: 'MenuCollectionMenus', name: string, description?: string | null | undefined, available?: boolean | null | undefined, sections?: Array<{ __typename: 'MenuCollectionMenusSections', name: string, items?: Array<{ __typename: 'MenuCollectionMenusSectionsItems', name: string, description?: string | null | undefined, price?: number | null | undefined, dietary?: Array<string | null | undefined> | null | undefined, available?: boolean | null | undefined, modifiers?: Array<{ __typename: 'MenuCollectionMenusSectionsItemsModifiers', name?: string | null | undefined, price?: number | null | undefined } | null | undefined> | null | undefined, images?: Array<{ __typename: 'MenuCollectionMenusSectionsItemsImages', name: string, src: string } | null | undefined> | null | undefined } | null | undefined> | null | undefined } | null | undefined> | null | undefined } | null | undefined> | null | undefined };

export type PostsPartsFragment = { __typename?: 'Posts', title?: string | null | undefined, body?: string | null | undefined };

export type GetBusinessInfoDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetBusinessInfoDocumentQuery = { __typename?: 'Query', getBusinessInfoDocument: { __typename?: 'BusinessInfoDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'BusinessInfo', name?: string | null | undefined, phoneNumber?: string | null | undefined, email?: string | null | undefined, address?: { __typename: 'BusinessInfoAddress', name: string, description?: string | null | undefined, street?: string | null | undefined, street2?: string | null | undefined, city?: string | null | undefined, region?: string | null | undefined, zip?: string | null | undefined, directions?: string | null | undefined } | null | undefined, hours?: Array<{ __typename: 'BusinessInfoHours', day?: string | null | undefined, hours?: string | null | undefined } | null | undefined> | null | undefined } } };

export type GetBusinessInfoListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetBusinessInfoListQuery = { __typename?: 'Query', getBusinessInfoList: { __typename?: 'BusinessInfoConnection', totalCount: number, edges?: Array<{ __typename?: 'BusinessInfoConnectionEdges', node?: { __typename?: 'BusinessInfoDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'BusinessInfo', name?: string | null | undefined, phoneNumber?: string | null | undefined, email?: string | null | undefined, address?: { __typename: 'BusinessInfoAddress', name: string, description?: string | null | undefined, street?: string | null | undefined, street2?: string | null | undefined, city?: string | null | undefined, region?: string | null | undefined, zip?: string | null | undefined, directions?: string | null | undefined } | null | undefined, hours?: Array<{ __typename: 'BusinessInfoHours', day?: string | null | undefined, hours?: string | null | undefined } | null | undefined> | null | undefined } } | null | undefined } | null | undefined> | null | undefined } };

export type GetMenuCollectionDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetMenuCollectionDocumentQuery = { __typename?: 'Query', getMenuCollectionDocument: { __typename?: 'MenuCollectionDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'MenuCollection', menus?: Array<{ __typename: 'MenuCollectionMenus', name: string, description?: string | null | undefined, available?: boolean | null | undefined, sections?: Array<{ __typename: 'MenuCollectionMenusSections', name: string, items?: Array<{ __typename: 'MenuCollectionMenusSectionsItems', name: string, description?: string | null | undefined, price?: number | null | undefined, dietary?: Array<string | null | undefined> | null | undefined, available?: boolean | null | undefined, modifiers?: Array<{ __typename: 'MenuCollectionMenusSectionsItemsModifiers', name?: string | null | undefined, price?: number | null | undefined } | null | undefined> | null | undefined, images?: Array<{ __typename: 'MenuCollectionMenusSectionsItemsImages', name: string, src: string } | null | undefined> | null | undefined } | null | undefined> | null | undefined } | null | undefined> | null | undefined } | null | undefined> | null | undefined } } };

export type GetMenuCollectionListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMenuCollectionListQuery = { __typename?: 'Query', getMenuCollectionList: { __typename?: 'MenuCollectionConnection', totalCount: number, edges?: Array<{ __typename?: 'MenuCollectionConnectionEdges', node?: { __typename?: 'MenuCollectionDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'MenuCollection', menus?: Array<{ __typename: 'MenuCollectionMenus', name: string, description?: string | null | undefined, available?: boolean | null | undefined, sections?: Array<{ __typename: 'MenuCollectionMenusSections', name: string, items?: Array<{ __typename: 'MenuCollectionMenusSectionsItems', name: string, description?: string | null | undefined, price?: number | null | undefined, dietary?: Array<string | null | undefined> | null | undefined, available?: boolean | null | undefined, modifiers?: Array<{ __typename: 'MenuCollectionMenusSectionsItemsModifiers', name?: string | null | undefined, price?: number | null | undefined } | null | undefined> | null | undefined, images?: Array<{ __typename: 'MenuCollectionMenusSectionsItemsImages', name: string, src: string } | null | undefined> | null | undefined } | null | undefined> | null | undefined } | null | undefined> | null | undefined } | null | undefined> | null | undefined } } | null | undefined } | null | undefined> | null | undefined } };

export type GetPostsDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetPostsDocumentQuery = { __typename?: 'Query', getPostsDocument: { __typename?: 'PostsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Posts', title?: string | null | undefined, body?: string | null | undefined } } };

export type GetPostsListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPostsListQuery = { __typename?: 'Query', getPostsList: { __typename?: 'PostsConnection', totalCount: number, edges?: Array<{ __typename?: 'PostsConnectionEdges', node?: { __typename?: 'PostsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Posts', title?: string | null | undefined, body?: string | null | undefined } } | null | undefined } | null | undefined> | null | undefined } };

export const BusinessInfoPartsFragmentDoc = gql`
    fragment BusinessInfoParts on BusinessInfo {
  name
  phoneNumber
  email
  address {
    __typename
    name
    description
    street
    street2
    city
    region
    zip
    directions
  }
  hours {
    __typename
    day
    hours
  }
}
    `;
export const MenuCollectionPartsFragmentDoc = gql`
    fragment MenuCollectionParts on MenuCollection {
  menus {
    __typename
    name
    description
    available
    sections {
      __typename
      name
      items {
        __typename
        name
        description
        price
        dietary
        modifiers {
          __typename
          name
          price
        }
        available
        images {
          __typename
          name
          src
        }
      }
    }
  }
}
    `;
export const PostsPartsFragmentDoc = gql`
    fragment PostsParts on Posts {
  title
  body
}
    `;
export const GetBusinessInfoDocumentDocument = gql`
    query getBusinessInfoDocument($relativePath: String!) {
  getBusinessInfoDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...BusinessInfoParts
    }
  }
}
    ${BusinessInfoPartsFragmentDoc}`;
export const GetBusinessInfoListDocument = gql`
    query getBusinessInfoList {
  getBusinessInfoList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...BusinessInfoParts
        }
      }
    }
  }
}
    ${BusinessInfoPartsFragmentDoc}`;
export const GetMenuCollectionDocumentDocument = gql`
    query getMenuCollectionDocument($relativePath: String!) {
  getMenuCollectionDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...MenuCollectionParts
    }
  }
}
    ${MenuCollectionPartsFragmentDoc}`;
export const GetMenuCollectionListDocument = gql`
    query getMenuCollectionList {
  getMenuCollectionList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...MenuCollectionParts
        }
      }
    }
  }
}
    ${MenuCollectionPartsFragmentDoc}`;
export const GetPostsDocumentDocument = gql`
    query getPostsDocument($relativePath: String!) {
  getPostsDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...PostsParts
    }
  }
}
    ${PostsPartsFragmentDoc}`;
export const GetPostsListDocument = gql`
    query getPostsList {
  getPostsList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...PostsParts
        }
      }
    }
  }
}
    ${PostsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getBusinessInfoDocument(variables: GetBusinessInfoDocumentQueryVariables, options?: C): Promise<{data: GetBusinessInfoDocumentQuery, variables: GetBusinessInfoDocumentQueryVariables, query: string}> {
        return requester<{data: GetBusinessInfoDocumentQuery, variables: GetBusinessInfoDocumentQueryVariables, query: string}, GetBusinessInfoDocumentQueryVariables>(GetBusinessInfoDocumentDocument, variables, options);
      },
    getBusinessInfoList(variables?: GetBusinessInfoListQueryVariables, options?: C): Promise<{data: GetBusinessInfoListQuery, variables: GetBusinessInfoListQueryVariables, query: string}> {
        return requester<{data: GetBusinessInfoListQuery, variables: GetBusinessInfoListQueryVariables, query: string}, GetBusinessInfoListQueryVariables>(GetBusinessInfoListDocument, variables, options);
      },
    getMenuCollectionDocument(variables: GetMenuCollectionDocumentQueryVariables, options?: C): Promise<{data: GetMenuCollectionDocumentQuery, variables: GetMenuCollectionDocumentQueryVariables, query: string}> {
        return requester<{data: GetMenuCollectionDocumentQuery, variables: GetMenuCollectionDocumentQueryVariables, query: string}, GetMenuCollectionDocumentQueryVariables>(GetMenuCollectionDocumentDocument, variables, options);
      },
    getMenuCollectionList(variables?: GetMenuCollectionListQueryVariables, options?: C): Promise<{data: GetMenuCollectionListQuery, variables: GetMenuCollectionListQueryVariables, query: string}> {
        return requester<{data: GetMenuCollectionListQuery, variables: GetMenuCollectionListQueryVariables, query: string}, GetMenuCollectionListQueryVariables>(GetMenuCollectionListDocument, variables, options);
      },
    getPostsDocument(variables: GetPostsDocumentQueryVariables, options?: C): Promise<{data: GetPostsDocumentQuery, variables: GetPostsDocumentQueryVariables, query: string}> {
        return requester<{data: GetPostsDocumentQuery, variables: GetPostsDocumentQueryVariables, query: string}, GetPostsDocumentQueryVariables>(GetPostsDocumentDocument, variables, options);
      },
    getPostsList(variables?: GetPostsListQueryVariables, options?: C): Promise<{data: GetPostsListQuery, variables: GetPostsListQueryVariables, query: string}> {
        return requester<{data: GetPostsListQuery, variables: GetPostsListQueryVariables, query: string}, GetPostsListQueryVariables>(GetPostsListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { getStaticPropsForTina } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  // const data = await tinaClient.request(doc, { variables: vars }); 
  const res = await await getStaticPropsForTina({query: doc, variables: vars})
  return res
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

