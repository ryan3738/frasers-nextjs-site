//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export function gql(strings: TemplateStringsArray, ...args: string[]): string {
  let str = ''
  strings.forEach((string, i) => {
    str += string + (args[i] || '')
  })
  return str
}
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  galleryGrid: GalleryGrid;
  galleryGridConnection: GalleryGridConnection;
  businessInfo: BusinessInfo;
  businessInfoConnection: BusinessInfoConnection;
  menu: Menu;
  menuConnection: MenuConnection;
  doubleFeature: DoubleFeature;
  doubleFeatureConnection: DoubleFeatureConnection;
  posts: Posts;
  postsConnection: PostsConnection;
  global: Global;
  globalConnection: GlobalConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGalleryGridArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGalleryGridConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryBusinessInfoArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryBusinessInfoConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryMenuArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryMenuConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryDoubleFeatureArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryDoubleFeatureConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryPostsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPostsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = GalleryGrid | BusinessInfo | Menu | DoubleFeature | Posts | Global;

export type GalleryGridImages = {
  __typename?: 'GalleryGridImages';
  alt: Scalars['String'];
  src?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
};

export type GalleryGrid = Node & Document & {
  __typename?: 'GalleryGrid';
  images?: Maybe<Array<Maybe<GalleryGridImages>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type GalleryGridConnectionEdges = {
  __typename?: 'GalleryGridConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<GalleryGrid>;
};

export type GalleryGridConnection = Connection & {
  __typename?: 'GalleryGridConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<GalleryGridConnectionEdges>>>;
};

export type BusinessInfoAddress = {
  __typename?: 'BusinessInfoAddress';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  street2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  directions?: Maybe<Scalars['String']>;
};

export type BusinessInfoHours = {
  __typename?: 'BusinessInfoHours';
  day?: Maybe<Scalars['String']>;
  hours?: Maybe<Scalars['String']>;
};

export type BusinessInfo = Node & Document & {
  __typename?: 'BusinessInfo';
  name?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  address?: Maybe<BusinessInfoAddress>;
  hours?: Maybe<Array<Maybe<BusinessInfoHours>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type BusinessInfoConnectionEdges = {
  __typename?: 'BusinessInfoConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<BusinessInfo>;
};

export type BusinessInfoConnection = Connection & {
  __typename?: 'BusinessInfoConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<BusinessInfoConnectionEdges>>>;
};

export type MenuSectionsItemsModifiers = {
  __typename?: 'MenuSectionsItemsModifiers';
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
};

export type MenuSectionsItemsImages = {
  __typename?: 'MenuSectionsItemsImages';
  alt: Scalars['String'];
  image?: Maybe<Scalars['String']>;
};

export type MenuSectionsItems = {
  __typename?: 'MenuSectionsItems';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  dietary?: Maybe<Array<Maybe<Scalars['String']>>>;
  modifiers?: Maybe<Array<Maybe<MenuSectionsItemsModifiers>>>;
  available?: Maybe<Scalars['Boolean']>;
  images?: Maybe<Array<Maybe<MenuSectionsItemsImages>>>;
};

export type MenuSections = {
  __typename?: 'MenuSections';
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  items?: Maybe<Array<Maybe<MenuSectionsItems>>>;
};

export type Menu = Node & Document & {
  __typename?: 'Menu';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  available?: Maybe<Scalars['Boolean']>;
  sections?: Maybe<Array<Maybe<MenuSections>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type MenuConnectionEdges = {
  __typename?: 'MenuConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Menu>;
};

export type MenuConnection = Connection & {
  __typename?: 'MenuConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<MenuConnectionEdges>>>;
};

export type DoubleFeatureImage = {
  __typename?: 'DoubleFeatureImage';
  src?: Maybe<Scalars['String']>;
  alt: Scalars['String'];
};

export type DoubleFeature = Node & Document & {
  __typename?: 'DoubleFeature';
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  image?: Maybe<DoubleFeatureImage>;
  elementId?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type DoubleFeatureConnectionEdges = {
  __typename?: 'DoubleFeatureConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DoubleFeature>;
};

export type DoubleFeatureConnection = Connection & {
  __typename?: 'DoubleFeatureConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DoubleFeatureConnectionEdges>>>;
};

export type Posts = Node & Document & {
  __typename?: 'Posts';
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PostsConnectionEdges = {
  __typename?: 'PostsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Posts>;
};

export type PostsConnection = Connection & {
  __typename?: 'PostsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;
};

export type GlobalNavigationLinks = {
  __typename?: 'GlobalNavigationLinks';
  href?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  header?: Maybe<Scalars['Boolean']>;
  burger?: Maybe<Scalars['Boolean']>;
  footer?: Maybe<Scalars['Boolean']>;
};

export type GlobalNavigation = {
  __typename?: 'GlobalNavigation';
  links?: Maybe<Array<Maybe<GlobalNavigationLinks>>>;
};

export type GlobalTheme = {
  __typename?: 'GlobalTheme';
  color?: Maybe<Scalars['String']>;
  darkMode?: Maybe<Scalars['String']>;
};

export type GlobalMeta = {
  __typename?: 'GlobalMeta';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
  cardImage?: Maybe<Scalars['String']>;
};

export type GlobalFooterSocial = {
  __typename?: 'GlobalFooterSocial';
  facebook?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  github?: Maybe<Scalars['String']>;
};

export type GlobalFooter = {
  __typename?: 'GlobalFooter';
  color?: Maybe<Scalars['String']>;
  social?: Maybe<GlobalFooterSocial>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  navigation?: Maybe<GlobalNavigation>;
  theme?: Maybe<GlobalTheme>;
  meta?: Maybe<GlobalMeta>;
  footer?: Maybe<GlobalFooter>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateGalleryGrid: GalleryGrid;
  createGalleryGrid: GalleryGrid;
  updateBusinessInfo: BusinessInfo;
  createBusinessInfo: BusinessInfo;
  updateMenu: Menu;
  createMenu: Menu;
  updateDoubleFeature: DoubleFeature;
  createDoubleFeature: DoubleFeature;
  updatePosts: Posts;
  createPosts: Posts;
  updateGlobal: Global;
  createGlobal: Global;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateGalleryGridArgs = {
  relativePath: Scalars['String'];
  params: GalleryGridMutation;
};


export type MutationCreateGalleryGridArgs = {
  relativePath: Scalars['String'];
  params: GalleryGridMutation;
};


export type MutationUpdateBusinessInfoArgs = {
  relativePath: Scalars['String'];
  params: BusinessInfoMutation;
};


export type MutationCreateBusinessInfoArgs = {
  relativePath: Scalars['String'];
  params: BusinessInfoMutation;
};


export type MutationUpdateMenuArgs = {
  relativePath: Scalars['String'];
  params: MenuMutation;
};


export type MutationCreateMenuArgs = {
  relativePath: Scalars['String'];
  params: MenuMutation;
};


export type MutationUpdateDoubleFeatureArgs = {
  relativePath: Scalars['String'];
  params: DoubleFeatureMutation;
};


export type MutationCreateDoubleFeatureArgs = {
  relativePath: Scalars['String'];
  params: DoubleFeatureMutation;
};


export type MutationUpdatePostsArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationCreatePostsArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};

export type DocumentMutation = {
  galleryGrid?: InputMaybe<GalleryGridMutation>;
  businessInfo?: InputMaybe<BusinessInfoMutation>;
  menu?: InputMaybe<MenuMutation>;
  doubleFeature?: InputMaybe<DoubleFeatureMutation>;
  posts?: InputMaybe<PostsMutation>;
  global?: InputMaybe<GlobalMutation>;
};

export type GalleryGridImagesMutation = {
  alt?: InputMaybe<Scalars['String']>;
  src?: InputMaybe<Scalars['String']>;
  format?: InputMaybe<Scalars['String']>;
};

export type GalleryGridMutation = {
  images?: InputMaybe<Array<InputMaybe<GalleryGridImagesMutation>>>;
};

export type BusinessInfoAddressMutation = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  street?: InputMaybe<Scalars['String']>;
  street2?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
  directions?: InputMaybe<Scalars['String']>;
};

export type BusinessInfoHoursMutation = {
  day?: InputMaybe<Scalars['String']>;
  hours?: InputMaybe<Scalars['String']>;
};

export type BusinessInfoMutation = {
  name?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<BusinessInfoAddressMutation>;
  hours?: InputMaybe<Array<InputMaybe<BusinessInfoHoursMutation>>>;
};

export type MenuSectionsItemsModifiersMutation = {
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Float']>;
};

export type MenuSectionsItemsImagesMutation = {
  alt?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
};

export type MenuSectionsItemsMutation = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Float']>;
  dietary?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  modifiers?: InputMaybe<Array<InputMaybe<MenuSectionsItemsModifiersMutation>>>;
  available?: InputMaybe<Scalars['Boolean']>;
  images?: InputMaybe<Array<InputMaybe<MenuSectionsItemsImagesMutation>>>;
};

export type MenuSectionsMutation = {
  name?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<MenuSectionsItemsMutation>>>;
};

export type MenuMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  available?: InputMaybe<Scalars['Boolean']>;
  sections?: InputMaybe<Array<InputMaybe<MenuSectionsMutation>>>;
};

export type DoubleFeatureImageMutation = {
  src?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type DoubleFeatureMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<DoubleFeatureImageMutation>;
  elementId?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['String']>;
};

export type PostsMutation = {
  title?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['String']>;
};

export type GlobalNavigationLinksMutation = {
  href?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  header?: InputMaybe<Scalars['Boolean']>;
  burger?: InputMaybe<Scalars['Boolean']>;
  footer?: InputMaybe<Scalars['Boolean']>;
};

export type GlobalNavigationMutation = {
  links?: InputMaybe<Array<InputMaybe<GlobalNavigationLinksMutation>>>;
};

export type GlobalThemeMutation = {
  color?: InputMaybe<Scalars['String']>;
  darkMode?: InputMaybe<Scalars['String']>;
};

export type GlobalMetaMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  cardImage?: InputMaybe<Scalars['String']>;
};

export type GlobalFooterSocialMutation = {
  facebook?: InputMaybe<Scalars['String']>;
  twitter?: InputMaybe<Scalars['String']>;
  instagram?: InputMaybe<Scalars['String']>;
  github?: InputMaybe<Scalars['String']>;
};

export type GlobalFooterMutation = {
  color?: InputMaybe<Scalars['String']>;
  social?: InputMaybe<GlobalFooterSocialMutation>;
};

export type GlobalMutation = {
  navigation?: InputMaybe<GlobalNavigationMutation>;
  theme?: InputMaybe<GlobalThemeMutation>;
  meta?: InputMaybe<GlobalMetaMutation>;
  footer?: InputMaybe<GlobalFooterMutation>;
};

export type GalleryGridPartsFragment = { __typename?: 'GalleryGrid', images?: Array<{ __typename: 'GalleryGridImages', alt: string, src?: string | null, format?: string | null } | null> | null };

export type BusinessInfoPartsFragment = { __typename?: 'BusinessInfo', name?: string | null, phoneNumber?: string | null, email?: string | null, address?: { __typename: 'BusinessInfoAddress', name: string, description?: string | null, street?: string | null, street2?: string | null, city?: string | null, region?: string | null, zip?: string | null, directions?: string | null } | null, hours?: Array<{ __typename: 'BusinessInfoHours', day?: string | null, hours?: string | null } | null> | null };

export type MenuPartsFragment = { __typename?: 'Menu', title?: string | null, description?: string | null, notes?: string | null, available?: boolean | null, sections?: Array<{ __typename: 'MenuSections', name?: string | null, description?: string | null, notes?: string | null, items?: Array<{ __typename: 'MenuSectionsItems', name: string, description?: string | null, price?: number | null, dietary?: Array<string | null> | null, available?: boolean | null, modifiers?: Array<{ __typename: 'MenuSectionsItemsModifiers', name?: string | null, price?: number | null } | null> | null, images?: Array<{ __typename: 'MenuSectionsItemsImages', alt: string, image?: string | null } | null> | null } | null> | null } | null> | null };

export type DoubleFeaturePartsFragment = { __typename?: 'DoubleFeature', title?: string | null, subtitle?: string | null, elementId?: string | null, body?: string | null, image?: { __typename: 'DoubleFeatureImage', src?: string | null, alt: string } | null };

export type PostsPartsFragment = { __typename?: 'Posts', title?: string | null, body?: string | null };

export type GlobalPartsFragment = { __typename?: 'Global', navigation?: { __typename: 'GlobalNavigation', links?: Array<{ __typename: 'GlobalNavigationLinks', href?: string | null, label?: string | null, header?: boolean | null, burger?: boolean | null, footer?: boolean | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, darkMode?: string | null } | null, meta?: { __typename: 'GlobalMeta', title?: string | null, description?: string | null, keywords?: Array<string | null> | null, cardImage?: string | null } | null, footer?: { __typename: 'GlobalFooter', color?: string | null, social?: { __typename: 'GlobalFooterSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null } | null };

export type GalleryGridQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GalleryGridQuery = { __typename?: 'Query', galleryGrid: { __typename?: 'GalleryGrid', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, images?: Array<{ __typename: 'GalleryGridImages', alt: string, src?: string | null, format?: string | null } | null> | null } };

export type GalleryGridConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type GalleryGridConnectionQuery = { __typename?: 'Query', galleryGridConnection: { __typename?: 'GalleryGridConnection', totalCount: number, edges?: Array<{ __typename?: 'GalleryGridConnectionEdges', node?: { __typename?: 'GalleryGrid', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, images?: Array<{ __typename: 'GalleryGridImages', alt: string, src?: string | null, format?: string | null } | null> | null } | null } | null> | null } };

export type BusinessInfoQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type BusinessInfoQuery = { __typename?: 'Query', businessInfo: { __typename?: 'BusinessInfo', id: string, name?: string | null, phoneNumber?: string | null, email?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, address?: { __typename: 'BusinessInfoAddress', name: string, description?: string | null, street?: string | null, street2?: string | null, city?: string | null, region?: string | null, zip?: string | null, directions?: string | null } | null, hours?: Array<{ __typename: 'BusinessInfoHours', day?: string | null, hours?: string | null } | null> | null } };

export type BusinessInfoConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type BusinessInfoConnectionQuery = { __typename?: 'Query', businessInfoConnection: { __typename?: 'BusinessInfoConnection', totalCount: number, edges?: Array<{ __typename?: 'BusinessInfoConnectionEdges', node?: { __typename?: 'BusinessInfo', id: string, name?: string | null, phoneNumber?: string | null, email?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, address?: { __typename: 'BusinessInfoAddress', name: string, description?: string | null, street?: string | null, street2?: string | null, city?: string | null, region?: string | null, zip?: string | null, directions?: string | null } | null, hours?: Array<{ __typename: 'BusinessInfoHours', day?: string | null, hours?: string | null } | null> | null } | null } | null> | null } };

export type MenuQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type MenuQuery = { __typename?: 'Query', menu: { __typename?: 'Menu', id: string, title?: string | null, description?: string | null, notes?: string | null, available?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, sections?: Array<{ __typename: 'MenuSections', name?: string | null, description?: string | null, notes?: string | null, items?: Array<{ __typename: 'MenuSectionsItems', name: string, description?: string | null, price?: number | null, dietary?: Array<string | null> | null, available?: boolean | null, modifiers?: Array<{ __typename: 'MenuSectionsItemsModifiers', name?: string | null, price?: number | null } | null> | null, images?: Array<{ __typename: 'MenuSectionsItemsImages', alt: string, image?: string | null } | null> | null } | null> | null } | null> | null } };

export type MenuConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type MenuConnectionQuery = { __typename?: 'Query', menuConnection: { __typename?: 'MenuConnection', totalCount: number, edges?: Array<{ __typename?: 'MenuConnectionEdges', node?: { __typename?: 'Menu', id: string, title?: string | null, description?: string | null, notes?: string | null, available?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, sections?: Array<{ __typename: 'MenuSections', name?: string | null, description?: string | null, notes?: string | null, items?: Array<{ __typename: 'MenuSectionsItems', name: string, description?: string | null, price?: number | null, dietary?: Array<string | null> | null, available?: boolean | null, modifiers?: Array<{ __typename: 'MenuSectionsItemsModifiers', name?: string | null, price?: number | null } | null> | null, images?: Array<{ __typename: 'MenuSectionsItemsImages', alt: string, image?: string | null } | null> | null } | null> | null } | null> | null } | null } | null> | null } };

export type DoubleFeatureQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type DoubleFeatureQuery = { __typename?: 'Query', doubleFeature: { __typename?: 'DoubleFeature', id: string, title?: string | null, subtitle?: string | null, elementId?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, image?: { __typename: 'DoubleFeatureImage', src?: string | null, alt: string } | null } };

export type DoubleFeatureConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type DoubleFeatureConnectionQuery = { __typename?: 'Query', doubleFeatureConnection: { __typename?: 'DoubleFeatureConnection', totalCount: number, edges?: Array<{ __typename?: 'DoubleFeatureConnectionEdges', node?: { __typename?: 'DoubleFeature', id: string, title?: string | null, subtitle?: string | null, elementId?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, image?: { __typename: 'DoubleFeatureImage', src?: string | null, alt: string } | null } | null } | null> | null } };

export type PostsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PostsQuery = { __typename?: 'Query', posts: { __typename?: 'Posts', id: string, title?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type PostsConnectionQuery = { __typename?: 'Query', postsConnection: { __typename?: 'PostsConnection', totalCount: number, edges?: Array<{ __typename?: 'PostsConnectionEdges', node?: { __typename?: 'Posts', id: string, title?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigation?: { __typename: 'GlobalNavigation', links?: Array<{ __typename: 'GlobalNavigationLinks', href?: string | null, label?: string | null, header?: boolean | null, burger?: boolean | null, footer?: boolean | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, darkMode?: string | null } | null, meta?: { __typename: 'GlobalMeta', title?: string | null, description?: string | null, keywords?: Array<string | null> | null, cardImage?: string | null } | null, footer?: { __typename: 'GlobalFooter', color?: string | null, social?: { __typename: 'GlobalFooterSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, edges?: Array<{ __typename?: 'GlobalConnectionEdges', node?: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigation?: { __typename: 'GlobalNavigation', links?: Array<{ __typename: 'GlobalNavigationLinks', href?: string | null, label?: string | null, header?: boolean | null, burger?: boolean | null, footer?: boolean | null } | null> | null } | null, theme?: { __typename: 'GlobalTheme', color?: string | null, darkMode?: string | null } | null, meta?: { __typename: 'GlobalMeta', title?: string | null, description?: string | null, keywords?: Array<string | null> | null, cardImage?: string | null } | null, footer?: { __typename: 'GlobalFooter', color?: string | null, social?: { __typename: 'GlobalFooterSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null } | null } | null } | null> | null } };

export const GalleryGridPartsFragmentDoc = gql`
    fragment GalleryGridParts on GalleryGrid {
  images {
    __typename
    alt
    src
    format
  }
}
    `;
export const BusinessInfoPartsFragmentDoc = gql`
    fragment BusinessInfoParts on BusinessInfo {
  name
  phoneNumber
  email
  address {
    __typename
    name
    description
    street
    street2
    city
    region
    zip
    directions
  }
  hours {
    __typename
    day
    hours
  }
}
    `;
export const MenuPartsFragmentDoc = gql`
    fragment MenuParts on Menu {
  title
  description
  notes
  available
  sections {
    __typename
    name
    description
    notes
    items {
      __typename
      name
      description
      price
      dietary
      modifiers {
        __typename
        name
        price
      }
      available
      images {
        __typename
        alt
        image
      }
    }
  }
}
    `;
export const DoubleFeaturePartsFragmentDoc = gql`
    fragment DoubleFeatureParts on DoubleFeature {
  title
  subtitle
  image {
    __typename
    src
    alt
  }
  elementId
  body
}
    `;
export const PostsPartsFragmentDoc = gql`
    fragment PostsParts on Posts {
  title
  body
}
    `;
export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  navigation {
    __typename
    links {
      __typename
      href
      label
      header
      burger
      footer
    }
  }
  theme {
    __typename
    color
    darkMode
  }
  meta {
    __typename
    title
    description
    keywords
    cardImage
  }
  footer {
    __typename
    color
    social {
      __typename
      facebook
      twitter
      instagram
      github
    }
  }
}
    `;
export const GalleryGridDocument = gql`
    query galleryGrid($relativePath: String!) {
  galleryGrid(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GalleryGridParts
  }
}
    ${GalleryGridPartsFragmentDoc}`;
export const GalleryGridConnectionDocument = gql`
    query galleryGridConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  galleryGridConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GalleryGridParts
      }
    }
  }
}
    ${GalleryGridPartsFragmentDoc}`;
export const BusinessInfoDocument = gql`
    query businessInfo($relativePath: String!) {
  businessInfo(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BusinessInfoParts
  }
}
    ${BusinessInfoPartsFragmentDoc}`;
export const BusinessInfoConnectionDocument = gql`
    query businessInfoConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  businessInfoConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BusinessInfoParts
      }
    }
  }
}
    ${BusinessInfoPartsFragmentDoc}`;
export const MenuDocument = gql`
    query menu($relativePath: String!) {
  menu(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MenuParts
  }
}
    ${MenuPartsFragmentDoc}`;
export const MenuConnectionDocument = gql`
    query menuConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  menuConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MenuParts
      }
    }
  }
}
    ${MenuPartsFragmentDoc}`;
export const DoubleFeatureDocument = gql`
    query doubleFeature($relativePath: String!) {
  doubleFeature(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...DoubleFeatureParts
  }
}
    ${DoubleFeaturePartsFragmentDoc}`;
export const DoubleFeatureConnectionDocument = gql`
    query doubleFeatureConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  doubleFeatureConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...DoubleFeatureParts
      }
    }
  }
}
    ${DoubleFeaturePartsFragmentDoc}`;
export const PostsDocument = gql`
    query posts($relativePath: String!) {
  posts(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostsParts
  }
}
    ${PostsPartsFragmentDoc}`;
export const PostsConnectionDocument = gql`
    query postsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  postsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostsParts
      }
    }
  }
}
    ${PostsPartsFragmentDoc}`;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      galleryGrid(variables: GalleryGridQueryVariables, options?: C): Promise<{data: GalleryGridQuery, variables: GalleryGridQueryVariables, query: string}> {
        return requester<{data: GalleryGridQuery, variables: GalleryGridQueryVariables, query: string}, GalleryGridQueryVariables>(GalleryGridDocument, variables, options);
      },
    galleryGridConnection(variables?: GalleryGridConnectionQueryVariables, options?: C): Promise<{data: GalleryGridConnectionQuery, variables: GalleryGridConnectionQueryVariables, query: string}> {
        return requester<{data: GalleryGridConnectionQuery, variables: GalleryGridConnectionQueryVariables, query: string}, GalleryGridConnectionQueryVariables>(GalleryGridConnectionDocument, variables, options);
      },
    businessInfo(variables: BusinessInfoQueryVariables, options?: C): Promise<{data: BusinessInfoQuery, variables: BusinessInfoQueryVariables, query: string}> {
        return requester<{data: BusinessInfoQuery, variables: BusinessInfoQueryVariables, query: string}, BusinessInfoQueryVariables>(BusinessInfoDocument, variables, options);
      },
    businessInfoConnection(variables?: BusinessInfoConnectionQueryVariables, options?: C): Promise<{data: BusinessInfoConnectionQuery, variables: BusinessInfoConnectionQueryVariables, query: string}> {
        return requester<{data: BusinessInfoConnectionQuery, variables: BusinessInfoConnectionQueryVariables, query: string}, BusinessInfoConnectionQueryVariables>(BusinessInfoConnectionDocument, variables, options);
      },
    menu(variables: MenuQueryVariables, options?: C): Promise<{data: MenuQuery, variables: MenuQueryVariables, query: string}> {
        return requester<{data: MenuQuery, variables: MenuQueryVariables, query: string}, MenuQueryVariables>(MenuDocument, variables, options);
      },
    menuConnection(variables?: MenuConnectionQueryVariables, options?: C): Promise<{data: MenuConnectionQuery, variables: MenuConnectionQueryVariables, query: string}> {
        return requester<{data: MenuConnectionQuery, variables: MenuConnectionQueryVariables, query: string}, MenuConnectionQueryVariables>(MenuConnectionDocument, variables, options);
      },
    doubleFeature(variables: DoubleFeatureQueryVariables, options?: C): Promise<{data: DoubleFeatureQuery, variables: DoubleFeatureQueryVariables, query: string}> {
        return requester<{data: DoubleFeatureQuery, variables: DoubleFeatureQueryVariables, query: string}, DoubleFeatureQueryVariables>(DoubleFeatureDocument, variables, options);
      },
    doubleFeatureConnection(variables?: DoubleFeatureConnectionQueryVariables, options?: C): Promise<{data: DoubleFeatureConnectionQuery, variables: DoubleFeatureConnectionQueryVariables, query: string}> {
        return requester<{data: DoubleFeatureConnectionQuery, variables: DoubleFeatureConnectionQueryVariables, query: string}, DoubleFeatureConnectionQueryVariables>(DoubleFeatureConnectionDocument, variables, options);
      },
    posts(variables: PostsQueryVariables, options?: C): Promise<{data: PostsQuery, variables: PostsQueryVariables, query: string}> {
        return requester<{data: PostsQuery, variables: PostsQueryVariables, query: string}, PostsQueryVariables>(PostsDocument, variables, options);
      },
    postsConnection(variables?: PostsConnectionQueryVariables, options?: C): Promise<{data: PostsConnectionQuery, variables: PostsConnectionQueryVariables, query: string}> {
        return requester<{data: PostsConnectionQuery, variables: PostsConnectionQueryVariables, query: string}, PostsConnectionQueryVariables>(PostsConnectionDocument, variables, options);
      },
    global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    let data = {};
    try {
      data = await client.request({
        query: doc,
        variables: vars,
      });
    } catch (e) {
      // swallow errors related to document creation
      console.warn("Warning: There was an error when fetching data");
      console.warn(e);
    }

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql" }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

