# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  galleryGrid(relativePath: String): GalleryGrid!
  galleryGridConnection(before: String, after: String, first: Float, last: Float, sort: String): GalleryGridConnection!
  businessInfo(relativePath: String): BusinessInfo!
  businessInfoConnection(before: String, after: String, first: Float, last: Float, sort: String): BusinessInfoConnection!
  menu(relativePath: String): Menu!
  menuConnection(before: String, after: String, first: Float, last: Float, sort: String): MenuConnection!
  doubleFeature(relativePath: String): DoubleFeature!
  doubleFeatureConnection(before: String, after: String, first: Float, last: Float, sort: String): DoubleFeatureConnection!
  posts(relativePath: String): Posts!
  postsConnection(before: String, after: String, first: Float, last: Float, sort: String): PostsConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String): GlobalConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = GalleryGrid | BusinessInfo | Menu | DoubleFeature | Posts | Global

type GalleryGridImages {
  alt: String!
  src: String
  format: String
}

type GalleryGrid implements Node & Document {
  images: [GalleryGridImages]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GalleryGridConnectionEdges {
  cursor: String!
  node: GalleryGrid
}

type GalleryGridConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GalleryGridConnectionEdges]
}

type BusinessInfoAddress {
  name: String!
  description: String
  street: String
  street2: String
  city: String
  region: String
  zip: String
  directions: String
}

type BusinessInfoHours {
  day: String
  hours: String
}

type BusinessInfo implements Node & Document {
  name: String
  phoneNumber: String
  email: String
  address: BusinessInfoAddress
  hours: [BusinessInfoHours]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type BusinessInfoConnectionEdges {
  cursor: String!
  node: BusinessInfo
}

type BusinessInfoConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BusinessInfoConnectionEdges]
}

type MenuSectionsItemsModifiers {
  name: String
  price: Float
}

type MenuSectionsItemsImages {
  alt: String!
  image: String
}

type MenuSectionsItems {
  name: String!
  description: String
  price: Float
  dietary: [String]
  modifiers: [MenuSectionsItemsModifiers]
  available: Boolean
  images: [MenuSectionsItemsImages]
}

type MenuSections {
  name: String
  description: String
  notes: String
  items: [MenuSectionsItems]
}

type Menu implements Node & Document {
  title: String
  description: String
  notes: String
  available: Boolean
  sections: [MenuSections]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type MenuConnectionEdges {
  cursor: String!
  node: Menu
}

type MenuConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MenuConnectionEdges]
}

type DoubleFeatureImage {
  src: String
  alt: String!
}

type DoubleFeature implements Node & Document {
  title: String
  subtitle: String
  image: DoubleFeatureImage
  elementId: String
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type DoubleFeatureConnectionEdges {
  cursor: String!
  node: DoubleFeature
}

type DoubleFeatureConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DoubleFeatureConnectionEdges]
}

type Posts implements Node & Document {
  title: String
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostsConnectionEdges {
  cursor: String!
  node: Posts
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type GlobalNavigationLinks {
  href: String
  label: String
  header: Boolean
  burger: Boolean
  footer: Boolean
}

type GlobalNavigation {
  links: [GlobalNavigationLinks]
}

type GlobalTheme {
  color: String
  darkMode: String
}

type GlobalMeta {
  title: String
  description: String
  keywords: [String]
  cardImage: String
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type Global implements Node & Document {
  navigation: GlobalNavigation
  theme: GlobalTheme
  meta: GlobalMeta
  footer: GlobalFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGalleryGrid(relativePath: String!, params: GalleryGridMutation!): GalleryGrid!
  createGalleryGrid(relativePath: String!, params: GalleryGridMutation!): GalleryGrid!
  updateBusinessInfo(relativePath: String!, params: BusinessInfoMutation!): BusinessInfo!
  createBusinessInfo(relativePath: String!, params: BusinessInfoMutation!): BusinessInfo!
  updateMenu(relativePath: String!, params: MenuMutation!): Menu!
  createMenu(relativePath: String!, params: MenuMutation!): Menu!
  updateDoubleFeature(relativePath: String!, params: DoubleFeatureMutation!): DoubleFeature!
  createDoubleFeature(relativePath: String!, params: DoubleFeatureMutation!): DoubleFeature!
  updatePosts(relativePath: String!, params: PostsMutation!): Posts!
  createPosts(relativePath: String!, params: PostsMutation!): Posts!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
}

input DocumentMutation {
  galleryGrid: GalleryGridMutation
  businessInfo: BusinessInfoMutation
  menu: MenuMutation
  doubleFeature: DoubleFeatureMutation
  posts: PostsMutation
  global: GlobalMutation
}

input GalleryGridImagesMutation {
  alt: String
  src: String
  format: String
}

input GalleryGridMutation {
  images: [GalleryGridImagesMutation]
}

input BusinessInfoAddressMutation {
  name: String
  description: String
  street: String
  street2: String
  city: String
  region: String
  zip: String
  directions: String
}

input BusinessInfoHoursMutation {
  day: String
  hours: String
}

input BusinessInfoMutation {
  name: String
  phoneNumber: String
  email: String
  address: BusinessInfoAddressMutation
  hours: [BusinessInfoHoursMutation]
}

input MenuSectionsItemsModifiersMutation {
  name: String
  price: Float
}

input MenuSectionsItemsImagesMutation {
  alt: String
  image: String
}

input MenuSectionsItemsMutation {
  name: String
  description: String
  price: Float
  dietary: [String]
  modifiers: [MenuSectionsItemsModifiersMutation]
  available: Boolean
  images: [MenuSectionsItemsImagesMutation]
}

input MenuSectionsMutation {
  name: String
  description: String
  notes: String
  items: [MenuSectionsItemsMutation]
}

input MenuMutation {
  title: String
  description: String
  notes: String
  available: Boolean
  sections: [MenuSectionsMutation]
}

input DoubleFeatureImageMutation {
  src: String
  alt: String
}

input DoubleFeatureMutation {
  title: String
  subtitle: String
  image: DoubleFeatureImageMutation
  elementId: String
  body: String
}

input PostsMutation {
  title: String
  body: String
}

input GlobalNavigationLinksMutation {
  href: String
  label: String
  header: Boolean
  burger: Boolean
  footer: Boolean
}

input GlobalNavigationMutation {
  links: [GlobalNavigationLinksMutation]
}

input GlobalThemeMutation {
  color: String
  darkMode: String
}

input GlobalMetaMutation {
  title: String
  description: String
  keywords: [String]
  cardImage: String
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalMutation {
  navigation: GlobalNavigationMutation
  theme: GlobalThemeMutation
  meta: GlobalMetaMutation
  footer: GlobalFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
  