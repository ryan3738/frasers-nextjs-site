# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getBusinessInfoDocument(relativePath: String): BusinessInfoDocument!
  getBusinessInfoList(before: String, after: String, first: Int, last: Int): BusinessInfoConnection!
  getMenuCollectionDocument(relativePath: String): MenuCollectionDocument!
  getMenuCollectionList(before: String, after: String, first: Int, last: Int): MenuCollectionConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = BusinessInfoDocument | MenuCollectionDocument | PostsDocument

type BusinessInfoAddress {
  name: String!
  description: String
  street: String
  street2: String
  city: String
  region: String
  zip: String
  directions: String
}

type BusinessInfoHours {
  day: String
  hours: String
}

type BusinessInfo {
  name: String
  phoneNumber: String
  email: String
  address: BusinessInfoAddress
  hours: [BusinessInfoHours]
}

type BusinessInfoDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: BusinessInfo!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type BusinessInfoConnectionEdges {
  cursor: String
  node: BusinessInfoDocument
}

type BusinessInfoConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [BusinessInfoConnectionEdges]
}

type MenuCollectionMenusSectionsItemsModifiers {
  name: String
  price: Int
}

type MenuCollectionMenusSectionsItemsImages {
  name: String!
  src: String!
}

type MenuCollectionMenusSectionsItems {
  name: String!
  description: String
  price: Int
  dietary: [String]
  modifiers: [MenuCollectionMenusSectionsItemsModifiers]
  available: Boolean
  images: [MenuCollectionMenusSectionsItemsImages]
}

type MenuCollectionMenusSections {
  name: String!
  items: [MenuCollectionMenusSectionsItems]
}

type MenuCollectionMenus {
  name: String!
  description: String
  sections: [MenuCollectionMenusSections]
}

type MenuCollection {
  menus: [MenuCollectionMenus]
}

type MenuCollectionDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: MenuCollection!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MenuCollectionConnectionEdges {
  cursor: String
  node: MenuCollectionDocument
}

type MenuCollectionConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [MenuCollectionConnectionEdges]
}

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateBusinessInfoDocument(relativePath: String!, params: BusinessInfoMutation!): BusinessInfoDocument!
  createBusinessInfoDocument(relativePath: String!, params: BusinessInfoMutation!): BusinessInfoDocument!
  updateMenuCollectionDocument(relativePath: String!, params: MenuCollectionMutation!): MenuCollectionDocument!
  createMenuCollectionDocument(relativePath: String!, params: MenuCollectionMutation!): MenuCollectionDocument!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  createPostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
}

input DocumentMutation {
  businessInfo: BusinessInfoMutation
  menuCollection: MenuCollectionMutation
  posts: PostsMutation
}

input BusinessInfoAddressMutation {
  name: String
  description: String
  street: String
  street2: String
  city: String
  region: String
  zip: String
  directions: String
}

input BusinessInfoHoursMutation {
  day: String
  hours: String
}

input BusinessInfoMutation {
  name: String
  phoneNumber: String
  email: String
  address: BusinessInfoAddressMutation
  hours: [BusinessInfoHoursMutation]
}

input MenuCollectionMenusSectionsItemsModifiersMutation {
  name: String
  price: Int
}

input MenuCollectionMenusSectionsItemsImagesMutation {
  name: String
  src: String
}

input MenuCollectionMenusSectionsItemsMutation {
  name: String
  description: String
  price: Int
  dietary: [String]
  modifiers: [MenuCollectionMenusSectionsItemsModifiersMutation]
  available: Boolean
  images: [MenuCollectionMenusSectionsItemsImagesMutation]
}

input MenuCollectionMenusSectionsMutation {
  name: String
  items: [MenuCollectionMenusSectionsItemsMutation]
}

input MenuCollectionMenusMutation {
  name: String
  description: String
  sections: [MenuCollectionMenusSectionsMutation]
}

input MenuCollectionMutation {
  menus: [MenuCollectionMenusMutation]
}

input PostsMutation {
  title: String
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  