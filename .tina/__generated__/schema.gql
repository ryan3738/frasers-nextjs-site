# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getModifierDocument(relativePath: String): ModifierDocument!
  getModifierList(before: String, after: String, first: Int, last: Int): ModifierConnection!
  getMenuDocument(relativePath: String): MenuDocument!
  getMenuList(before: String, after: String, first: Int, last: Int): MenuConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = ModifierDocument | MenuDocument | PostsDocument

type Modifier {
  name: String
  price: Int
}

type ModifierDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Modifier!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ModifierConnectionEdges {
  cursor: String
  node: ModifierDocument
}

type ModifierConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [ModifierConnectionEdges]
}

type MenuSectionItem {
  name: String
  description: String
  price: Int
  dietary: [String]
  available: Boolean
}

type MenuSection {
  name: String
  item: MenuSectionItem
}

type Menu {
  name: String
  section: [MenuSection]
}

type MenuDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Menu!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MenuConnectionEdges {
  cursor: String
  node: MenuDocument
}

type MenuConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [MenuConnectionEdges]
}

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateModifierDocument(relativePath: String!, params: ModifierMutation!): ModifierDocument!
  createModifierDocument(relativePath: String!, params: ModifierMutation!): ModifierDocument!
  updateMenuDocument(relativePath: String!, params: MenuMutation!): MenuDocument!
  createMenuDocument(relativePath: String!, params: MenuMutation!): MenuDocument!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  createPostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
}

input DocumentMutation {
  modifier: ModifierMutation
  menu: MenuMutation
  posts: PostsMutation
}

input ModifierMutation {
  name: String
  price: Int
}

input MenuSectionItemMutation {
  name: String
  description: String
  price: Int
  dietary: [String]
  available: Boolean
}

input MenuSectionMutation {
  name: String
  item: MenuSectionItemMutation
}

input MenuMutation {
  name: String
  section: [MenuSectionMutation]
}

input PostsMutation {
  title: String
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  