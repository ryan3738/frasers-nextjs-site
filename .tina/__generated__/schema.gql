# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getMenusDocument(relativePath: String): MenusDocument!
  getMenusList(before: String, after: String, first: Int, last: Int): MenusConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = MenusDocument | PostsDocument

type MenusMenuSectionsItemsModifiers {
  name: String
  price: Int
}

type MenusMenuSectionsItemsImage {
  name: String!
  src: String!
}

type MenusMenuSectionsItems {
  name: String
  description: String
  price: Int
  dietary: [String]
  modifiers: [MenusMenuSectionsItemsModifiers]
  available: Boolean
  image: [MenusMenuSectionsItemsImage]
}

type MenusMenuSections {
  name: String
  items: [MenusMenuSectionsItems]
}

type MenusMenu {
  name: String
  label: String
  description: String
  sections: [MenusMenuSections]
}

type Menus {
  menu: [MenusMenu]
}

type MenusDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Menus!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MenusConnectionEdges {
  cursor: String
  node: MenusDocument
}

type MenusConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [MenusConnectionEdges]
}

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateMenusDocument(relativePath: String!, params: MenusMutation!): MenusDocument!
  createMenusDocument(relativePath: String!, params: MenusMutation!): MenusDocument!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  createPostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
}

input DocumentMutation {
  menus: MenusMutation
  posts: PostsMutation
}

input MenusMenuSectionsItemsModifiersMutation {
  name: String
  price: Int
}

input MenusMenuSectionsItemsImageMutation {
  name: String
  src: String
}

input MenusMenuSectionsItemsMutation {
  name: String
  description: String
  price: Int
  dietary: [String]
  modifiers: [MenusMenuSectionsItemsModifiersMutation]
  available: Boolean
  image: [MenusMenuSectionsItemsImageMutation]
}

input MenusMenuSectionsMutation {
  name: String
  items: [MenusMenuSectionsItemsMutation]
}

input MenusMenuMutation {
  name: String
  label: String
  description: String
  sections: [MenusMenuSectionsMutation]
}

input MenusMutation {
  menu: [MenusMenuMutation]
}

input PostsMutation {
  title: String
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  