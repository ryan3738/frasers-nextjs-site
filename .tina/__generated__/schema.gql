# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float): DocumentConnection!
  getDocumentFields: JSON!
  getGalleryGridDocument(relativePath: String): GalleryGridDocument!
  getGalleryGridList(before: String, after: String, first: Float, last: Float): GalleryGridConnection!
  getBusinessInfoDocument(relativePath: String): BusinessInfoDocument!
  getBusinessInfoList(before: String, after: String, first: Float, last: Float): BusinessInfoConnection!
  getMenuDocument(relativePath: String): MenuDocument!
  getMenuList(before: String, after: String, first: Float, last: Float): MenuConnection!
  getDoubleFeatureDocument(relativePath: String): DoubleFeatureDocument!
  getDoubleFeatureList(before: String, after: String, first: Float, last: Float): DoubleFeatureConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Float, last: Float): PostsConnection!
  getGlobalDocument(relativePath: String): GlobalDocument!
  getGlobalList(before: String, after: String, first: Float, last: Float): GlobalConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float): DocumentConnection!
}

union DocumentNode = GalleryGridDocument | BusinessInfoDocument | MenuDocument | DoubleFeatureDocument | PostsDocument | GlobalDocument

type GalleryGridImages {
  alt: String!
  src: String
  format: String
}

type GalleryGrid {
  images: [GalleryGridImages]
}

type GalleryGridDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: GalleryGrid!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GalleryGridConnectionEdges {
  cursor: String
  node: GalleryGridDocument
}

type GalleryGridConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [GalleryGridConnectionEdges]
}

type BusinessInfoAddress {
  name: String!
  description: String
  street: String
  street2: String
  city: String
  region: String
  zip: String
  directions: String
}

type BusinessInfoHours {
  day: String
  hours: String
}

type BusinessInfo {
  name: String
  phoneNumber: String
  email: String
  address: BusinessInfoAddress
  hours: [BusinessInfoHours]
}

type BusinessInfoDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: BusinessInfo!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type BusinessInfoConnectionEdges {
  cursor: String
  node: BusinessInfoDocument
}

type BusinessInfoConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [BusinessInfoConnectionEdges]
}

type MenuSectionsItemsModifiers {
  name: String
  price: Float
}

type MenuSectionsItemsImages {
  alt: String!
  image: String
}

type MenuSectionsItems {
  name: String!
  description: String
  price: Float
  dietary: [String]
  modifiers: [MenuSectionsItemsModifiers]
  available: Boolean
  images: [MenuSectionsItemsImages]
}

type MenuSections {
  name: String
  description: String
  notes: String
  items: [MenuSectionsItems]
}

type Menu {
  title: String
  description: String
  notes: String
  available: Boolean
  sections: [MenuSections]
}

type MenuDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Menu!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MenuConnectionEdges {
  cursor: String
  node: MenuDocument
}

type MenuConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [MenuConnectionEdges]
}

type DoubleFeatureImage {
  src: String
  alt: String!
}

type DoubleFeature {
  title: String
  subtitle: String
  image: DoubleFeatureImage
  elementId: String
  body: String
}

type DoubleFeatureDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: DoubleFeature!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type DoubleFeatureConnectionEdges {
  cursor: String
  node: DoubleFeatureDocument
}

type DoubleFeatureConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DoubleFeatureConnectionEdges]
}

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type GlobalMeta {
  title: String
  description: String
  keywords: [String]
  cardImage: String
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type GlobalTheme {
  color: String
  darkMode: String
}

type GlobalNavigationLinks {
  href: String
  label: String
  header: Boolean
  burger: Boolean
  footer: Boolean
}

type GlobalNavigation {
  links: [GlobalNavigationLinks]
}

type Global {
  meta: GlobalMeta
  footer: GlobalFooter
  theme: GlobalTheme
  navigation: GlobalNavigation
}

type GlobalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Global!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalConnectionEdges {
  cursor: String
  node: GlobalDocument
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGalleryGridDocument(relativePath: String!, params: GalleryGridMutation!): GalleryGridDocument!
  createGalleryGridDocument(relativePath: String!, params: GalleryGridMutation!): GalleryGridDocument!
  updateBusinessInfoDocument(relativePath: String!, params: BusinessInfoMutation!): BusinessInfoDocument!
  createBusinessInfoDocument(relativePath: String!, params: BusinessInfoMutation!): BusinessInfoDocument!
  updateMenuDocument(relativePath: String!, params: MenuMutation!): MenuDocument!
  createMenuDocument(relativePath: String!, params: MenuMutation!): MenuDocument!
  updateDoubleFeatureDocument(relativePath: String!, params: DoubleFeatureMutation!): DoubleFeatureDocument!
  createDoubleFeatureDocument(relativePath: String!, params: DoubleFeatureMutation!): DoubleFeatureDocument!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  createPostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  createGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
}

input DocumentMutation {
  galleryGrid: GalleryGridMutation
  businessInfo: BusinessInfoMutation
  menu: MenuMutation
  doubleFeature: DoubleFeatureMutation
  posts: PostsMutation
  global: GlobalMutation
}

input GalleryGridImagesMutation {
  alt: String
  src: String
  format: String
}

input GalleryGridMutation {
  images: [GalleryGridImagesMutation]
}

input BusinessInfoAddressMutation {
  name: String
  description: String
  street: String
  street2: String
  city: String
  region: String
  zip: String
  directions: String
}

input BusinessInfoHoursMutation {
  day: String
  hours: String
}

input BusinessInfoMutation {
  name: String
  phoneNumber: String
  email: String
  address: BusinessInfoAddressMutation
  hours: [BusinessInfoHoursMutation]
}

input MenuSectionsItemsModifiersMutation {
  name: String
  price: Float
}

input MenuSectionsItemsImagesMutation {
  alt: String
  image: String
}

input MenuSectionsItemsMutation {
  name: String
  description: String
  price: Float
  dietary: [String]
  modifiers: [MenuSectionsItemsModifiersMutation]
  available: Boolean
  images: [MenuSectionsItemsImagesMutation]
}

input MenuSectionsMutation {
  name: String
  description: String
  notes: String
  items: [MenuSectionsItemsMutation]
}

input MenuMutation {
  title: String
  description: String
  notes: String
  available: Boolean
  sections: [MenuSectionsMutation]
}

input DoubleFeatureImageMutation {
  src: String
  alt: String
}

input DoubleFeatureMutation {
  title: String
  subtitle: String
  image: DoubleFeatureImageMutation
  elementId: String
  body: String
}

input PostsMutation {
  title: String
  body: String
}

input GlobalMetaMutation {
  title: String
  description: String
  keywords: [String]
  cardImage: String
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalThemeMutation {
  color: String
  darkMode: String
}

input GlobalNavigationLinksMutation {
  href: String
  label: String
  header: Boolean
  burger: Boolean
  footer: Boolean
}

input GlobalNavigationMutation {
  links: [GlobalNavigationLinksMutation]
}

input GlobalMutation {
  meta: GlobalMetaMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
  navigation: GlobalNavigationMutation
}

schema {
  query: Query
  mutation: Mutation
}
  